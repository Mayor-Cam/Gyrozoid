<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Speed &amp; Velocity
velX = 0
velY = 0 
SpeedX = velX;
SpeedY = velY;
maxSpeedX = 7;
maxSpeedY = 7;


//Acceleration
AccelX = 0 
AccelY = 0 

//Position
x = x + SpeedX
y = y + SpeedY

// Angle
direction = 90;
image_angle = direction;

prev_mouse_x = mouse_x;
prev_mouse_y = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_aimSight</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Input Variables
key_left =  keyboard_check_direct(ord('A'))     // keyboard_check_direct(vk_left)
key_right = keyboard_check_direct(ord('D'))     // keyboard_check_direct(vk_right)
key_up =    keyboard_check_direct(ord('W'))     // keyboard_check_direct(vk_up)
key_down =  keyboard_check_direct(ord('S'))     // keyboard_check_direct(vk_down)

key_left_pressed =  keyboard_check_pressed(ord('A'))     // keyboard_check_pressed(vk_left)
key_right_pressed = keyboard_check_pressed(ord('D'))     // keyboard_check_pressed(vk_right)
key_up_pressed =    keyboard_check_pressed(ord('W'))     // keyboard_check_pressed(vk_up)
key_down_pressed =  keyboard_check_pressed(ord('S'))     // keyboard_check_pressed(vk_down)

key_left_released =     keyboard_check_released(ord('A'))    // keyboard_check_released(vk_left)
key_right_released =    keyboard_check_released(ord('D'))    // keyboard_check_released(vk_right)
key_up_released =       keyboard_check_released(ord('W'))    // keyboard_check_released(vk_up)
key_down_released =     keyboard_check_released(ord('S'))    // keyboard_check_released(vk_down)

mouse_dx = mouse_x - prev_mouse_x;
mouse_dy = mouse_y - prev_mouse_y;

// Normal Speed and Acceleration
AccelX = 0.5;
AccelY = 0.5;
velX += AccelX * (-key_left + key_right);
velY += AccelY * (-key_up + key_down);


// This code makes stopping with the arrow keys easier.
if(abs(velX) &gt; 0)
{
    if (sign(velX) + (-key_left_released + key_right_released) == 0 &amp;&amp; abs(velX) &lt; 4)     // If you're pressing the direction opposite of your velocity, which is less than 4, your speed is 0.
        {velX = 0;}
}
if (abs(velY) &gt; 0)
{
    if (sign(velY) + (-key_up_released + key_down_released) == 0 &amp;&amp; abs(velY) &lt; 4)
        {velY = 0;}
}

// Max Speed limit  (not necessary for motion controls)
if (abs(velX) &gt; maxSpeedX)
    {
        velX = sign(velX) * maxSpeedX;
    }
if (abs(velY) &gt; maxSpeedY)
    {
        velY = sign(velY) * maxSpeedY;
    }

/*
//Retro Alarm
if (key_left_pressed = true)  {Alarm[0] = 10}
if (key_left_released = true &amp;&amp; Alarm[0] &gt; 0) {
        if (0 &lt; SpeedX &lt; 5) {SpeedX = 0}
            else if (SpeedX &gt; 5)  { SpeedX += -5 }
}
*/

// Position
x += velX
y += velY
if(x &gt; room_width) {
    x = x-room_width;
}
if(x &lt; 0) {
    x = room_width-x;
}
if(y &gt; room_height) {
    y = y-room_height;
}
if(y &lt; 0) {
    y = room_height-y;
}
// Direction
image_angle = direction;
direction += -mouse_dx;

prev_mouse_x = mouse_x;
prev_mouse_y = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
